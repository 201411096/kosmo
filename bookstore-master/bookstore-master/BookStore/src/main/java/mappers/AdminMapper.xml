<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="AdminDAO">
	<!-- mybatis 자료형 : int / hashmap / string -->



	<!-- 상품등록 : 도서번호/저자번호/도매가/도서명/장르/줄거리/출간일/소매가/수량 -->
	<insert id="insertProduct" parameterType="book">
		INSERT INTO book
		(BOOK_ID,WRITER_ID,BOOK_PRICE,BOOK_NAME,BOOK_GENRE,BOOK_STORY,BOOK_PDATE,BOOK_SALEPRICE,BOOK_CNT , BOOK_SCORE, BOOK_SCORECOUNT )
		VALUES
		(book_id_seq.nextval,#{writerId},#{bookPrice},#{bookName},#{bookGenre},#{bookStory},#{bookPdate},#{bookSaleprice},#{bookCnt}, 0, 1)
	</insert>

	<!-- 상품출력 : 상품번호/상품명/장르/상품원가/상품정가/수량 -->
	<select id="selectProduct" parameterType="book"
		resultType="book">
		SELECT w.WRITER_ID, w.WRITER_NAME, b.BOOK_ID, b.BOOK_PDATE, b.BOOK_STORY, b.BOOK_NAME,
		b.BOOK_GENRE,b.BOOK_PRICE,b.BOOK_SALEPRICE, b.BOOK_CNT
		FROM (SELECT
		WRITER_ID,WRITER_NAME FROM writer) w
		inner join BOOK b
		on w.writer_id=b.writer_id
		order by b.BOOK_ID asc
	</select>

	<!-- 상품수정 : 책번호/저자번호/상품명/출간일/장르/상품원가/상품정가/수량 -->
	<update id="updateProduct" parameterType="book">
		UPDATE book
		SET
		writer_id=#{writerId}, book_price=#{bookPrice},
		book_name=#{bookName},
		book_genre=#{bookGenre},
		book_story=#{bookStory},
		book_pdate=#{bookPdate},
		BOOK_SALEPRICE=#{bookSaleprice},
		BOOK_CNT=#{bookCnt}
		WHERE(book_id=#{bookId})
	</update>

	<!-- 상품삭제 : 책번호/저자번호/상품명/출간일/장르/상품원가/상품정가/수량 -->
	<delete id="deleteProduct" parameterType="book">
		DELETE
		FROM BOOK
		WHERE
		book_id=#{bookId}
	</delete>

	<!-- 일매출 -->
	<select id="selectDSales" parameterType="book" resultType="map">
		select sum(buyprice), buy_date
		from (
		select
		bu.buy_cnt*bo.book_saleprice as buyprice, to_char(bl.buy_date,
		'YYMMDD') as buy_date
		from buy bu
		inner join book bo
		on bo.book_id =
		bu.book_id
		inner join buylist bl
		on bu.buylist_id = bl.buylist_id
		)
		group
		by buy_date;
	</select>

	<!-- 월매출 -->
	<select id="selectMSales" parameterType="book" resultType="map">
		select sum(buyprice), buy_date
		from (
		select
		bu.buy_cnt*bo.book_saleprice as buyprice, to_char(bl.buy_date,
		'YYMM')
		as buy_date
		from buy bu
		inner join book bo
		on bo.book_id = bu.book_id
		inner join buylist bl
		on bu.buylist_id = bl.buylist_id
		)
		group by
		buy_date;
	</select>
	<select id="selectSalesWithOptions" parameterType="hashmap" resultType="map">
		select buyPrice, buyDate, rnum
		from (
		    select buyPrice, buyDate, rownum as rnum
		    from (
		        select sum(buyprice) AS buyPrice, buy_date as buyDate 
		        from (
		            select
		            bu.buy_cnt*bo.book_saleprice as buyprice, to_char(bl.buy_date,
		            #{selectOption})
		            as buy_date
		            from buy bu
		            inner join book bo
		            on bo.book_id = bu.book_id
		            inner join buylist bl
		            on bu.buylist_id = bl.buylist_id
		        )
		        group by
		        buy_date
		        order by buyDate desc
		    )
		    
		)<![CDATA[ where rnum<=#{chartDataCnt}]]>
		
		order by buydate asc
	</select>

   <!-- 장르별 매출 -->
   <select id="getGenreSalesData" resultType="map">
      select book_genre, sum(buy_price) as buy_price
      from    (
            select bo.book_genre as book_genre,  NVL((bo.book_saleprice*bu.buy_cnt), 0) as buy_price 
            from buy bu inner join book bo
            on bu.book_id = bo.book_id
            )
      group by book_genre
      order by book_genre
   </select>
	<!-- 상품출력 : 상품명 + 상품명으로 검색 + 페이징 -->
	<select id="selectProductSearchByNameWithPaging"
		parameterType="hashmap" resultType="book">
	<![CDATA[
	SELECT *
	FROM (SELECT BOOK_ID,WRITER_ID,BOOK_PRICE,BOOK_NAME,BOOK_GENRE,BOOK_STORY,BOOK_PDATE,BOOK_SALEPRICE,BOOK_CNT
		, BOOK_SCORE, BOOK_SCORECOUNT, ROWNUM AS RNUM
		FROM BOOK
		WHERE REGEXP_LIKE (BOOK_NAME, '(*)'||#{searchWord}||'(*)')
			ORDER BY BOOK_ID ASC
		)
	WHERE RNUM>=#{startRow} and RNUM<=#{endRow}
	]]>
	</select>

	<!-- 상품출력 : 상품명 + 상품명으로 검색 + 페이징 -->
	<select id="selectProductCntByNameWithPaging"
		parameterType="string" resultType="int">
		<![CDATA[
		SELECT count(*)
		FROM (SELECT BOOK_ID,WRITER_ID,BOOK_PRICE,BOOK_NAME,BOOK_GENRE,BOOK_STORY,BOOK_PDATE,BOOK_SALEPRICE,BOOK_CNT
		, BOOK_SCORE, BOOK_SCORECOUNT
		FROM BOOK
		WHERE REGEXP_LIKE (BOOK_NAME, '(*)'||#{searchWord}||'(*)')
		ORDER BY BOOK_ID ASC
		)
		]]>
	</select>
	
	<select id="selectProductListWithFiltering" parameterType="map" resultType="book">
	
		select *
		from 
		(
			select rownum as rnum, writer_id, book_id, writer_name, book_price, book_name, book_genre, book_story, book_saleprice, book_pdate, book_cnt, BOOK_SCORE, BOOK_SCORECOUNT, BOOK_SCORE/BOOK_SCORECOUNT AS BOOK_SCOREDIVIDEBYCOUNT
			from 
			(
				select bo.writer_id as writer_id, bo.book_id as book_id, w.writer_name as writer_name, bo.book_price as book_price, bo.book_name as book_name, bo.book_genre as book_genre, bo.book_story as book_story, bo.book_saleprice as book_saleprice, bo.book_pdate as book_pdate, bo.book_cnt as book_cnt, bo.BOOK_SCORE AS BOOK_SCORE, bo.BOOK_SCORECOUNT AS BOOK_SCORECOUNT, bo.BOOK_SCORE/bo.BOOK_SCORECOUNT AS BOOK_SCOREDIVIDEBYCOUNT
					from book bo
					inner join writer w
					on w.writer_id = bo.writer_id
					<![CDATA[
					where  book_cnt <=#{bookCnt}
					]]>	
					<if test = "bookGenre != null">  
					and book_genre = #{bookGenre}
					</if>
<!-- 					<if test = "searchWord != null">   -->
<!-- 					and REGEXP_LIKE (BOOK_NAME, '(*)'||#{searchWord}||'(*)') OR REGEXP_LIKE (WRITER_NAME, '(*)'||#{searchWord}||'(*)') OR REGEXP_LIKE (BOOK_GENRE, '(*)'||#{searchWord}||'(*)') -->
<!-- 					</if> -->
					<if test="bookSortOption != null">
					order by ${bookSortOption} ${bookSortSequenceOption}
					</if>
			)
		)
		<![CDATA[
		where rnum>=#{startRow} and rnum<=#{endRow}
		]]>	
	</select>
	<select id="selectProductListCountWithFiltering" parameterType="map" resultType="int">
	
		select count(*)
		from 
		(
			select rownum as rnum, bo.writer_id as writer_id, bo.book_id as book_id, w.writer_name as writer_name, bo.book_price as book_price, bo.book_name as book_name, bo.book_genre as book_genre, bo.book_story as book_story, bo.book_saleprice as book_saleprice, bo.book_pdate as book_pdate, bo.book_cnt as book_cnt, bo.BOOK_SCORE AS BOOK_SCORE, bo.BOOK_SCORECOUNT AS BOOK_SCORECOUNT, bo.BOOK_SCORE/bo.BOOK_SCORECOUNT AS BOOK_SCOREDIVIDEBYCOUNT
			from book bo
			inner join writer w
			on w.writer_id = bo.writer_id
			<![CDATA[		
			where  book_cnt <=#{bookCnt}
			]]>	
			<if test = "bookGenre != null">  
			and book_genre = #{bookGenre}
			</if>
<!-- 			<if test = "searchWord != null">   -->
<!-- 			and REGEXP_LIKE (BOOK_NAME, '(*)'||#{searchWord}||'(*)') OR REGEXP_LIKE (WRITER_NAME, '(*)'||#{searchWord}||'(*)') OR REGEXP_LIKE (BOOK_GENRE, '(*)'||#{searchWord}||'(*)') -->
<!-- 			</if> -->
		)
	
	</select>
</mapper>